{"ast":null,"code":"var _jsxFileName = \"/Users/emon/Desktop/ME/src/CodeforcesInfo.js\",\n  _s = $RefreshSig$();\n// // CodeforcesInfo.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const CodeforcesInfo = () => {\n//   const [userInfo, setUserInfo] = useState(null);\n//   const [problemCount, setProblemCount] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // Fetch user information\n//         const userResponse = await axios.get('https://codeforces.com/api/user.info?handles=Tspectre');\n//         setUserInfo(userResponse.data.result[0]);\n\n//         // Fetch user's solved problems\n//         const statusResponse = await axios.get(\n//           `https://codeforces.com/api/user.status?handle=${userInfo.handle}`\n//         );\n\n//         // Count the number of distinct problems solved\n//         const solvedProblems = new Set();\n//         statusResponse.data.result.forEach((submission) => {\n//           if (submission.verdict === 'OK') {\n//             solvedProblems.add(submission.problem.contestId + submission.problem.index);\n//           }\n//         });\n\n//         setProblemCount(solvedProblems.size);\n//       } catch (error) {\n//         console.error('Error fetching Codeforces data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, [userInfo]);\n\n//   return (\n//     <div>\n//       {userInfo ? (\n//         <div>\n//           <h2>{userInfo.handle}</h2>\n//           <p>Rating: {userInfo.rating}</p>\n//           <p>Total Problems Solved: {problemCount}</p>\n//         </div>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CodeforcesInfo;\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YourComponent = () => {\n  _s();\n  const [flagText, setFlagText] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await makeRequest('https://vote.ductf.com/api/votes', 'GET');\n        if (response.ok) {\n          setFlagText(response.flag);\n        } else {\n          console.error('Failed to get flag text');\n        }\n      } catch (error) {\n        console.error('Error fetching flag text:', error);\n      }\n    };\n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your React App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), flagText !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Flag Text: \", flagText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading flag text...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(YourComponent, \"jAzFp/ii+2ytE1lZ8ThumeKcJjE=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","YourComponent","_s","flagText","setFlagText","fetchData","response","makeRequest","ok","flag","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emon/Desktop/ME/src/CodeforcesInfo.js"],"sourcesContent":["// // CodeforcesInfo.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const CodeforcesInfo = () => {\n//   const [userInfo, setUserInfo] = useState(null);\n//   const [problemCount, setProblemCount] = useState(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // Fetch user information\n//         const userResponse = await axios.get('https://codeforces.com/api/user.info?handles=Tspectre');\n//         setUserInfo(userResponse.data.result[0]);\n\n//         // Fetch user's solved problems\n//         const statusResponse = await axios.get(\n//           `https://codeforces.com/api/user.status?handle=${userInfo.handle}`\n//         );\n\n//         // Count the number of distinct problems solved\n//         const solvedProblems = new Set();\n//         statusResponse.data.result.forEach((submission) => {\n//           if (submission.verdict === 'OK') {\n//             solvedProblems.add(submission.problem.contestId + submission.problem.index);\n//           }\n//         });\n\n//         setProblemCount(solvedProblems.size);\n//       } catch (error) {\n//         console.error('Error fetching Codeforces data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, [userInfo]);\n\n//   return (\n//     <div>\n//       {userInfo ? (\n//         <div>\n//           <h2>{userInfo.handle}</h2>\n//           <p>Rating: {userInfo.rating}</p>\n//           <p>Total Problems Solved: {problemCount}</p>\n//         </div>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CodeforcesInfo;\n\nimport React, { useEffect, useState } from 'react';\n\nconst YourComponent = () => {\n  const [flagText, setFlagText] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await makeRequest('https://vote.ductf.com/api/votes', 'GET');\n        if (response.ok) {\n          setFlagText(response.flag);\n        } else {\n          console.error('Failed to get flag text');\n        }\n      } catch (error) {\n        console.error('Error fetching flag text:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts\n\n  return (\n    <div>\n      <h1>Your React App</h1>\n      {flagText !== null ? (\n        <div>\n          <p>Flag Text: {flagText}</p>\n          {/* Render other components based on flagText if needed */}\n        </div>\n      ) : (\n        <p>Loading flag text...</p>\n      )}\n    </div>\n  );\n};\n\nexport default YourComponent;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,WAAW,CAAC,kCAAkC,EAAE,KAAK,CAAC;QAC7E,IAAID,QAAQ,CAACE,EAAE,EAAE;UACfJ,WAAW,CAACE,QAAQ,CAACG,IAAI,CAAC;QAC5B,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBb,QAAQ,KAAK,IAAI,gBAChBH,OAAA;MAAAY,QAAA,eACEZ,OAAA;QAAAY,QAAA,GAAG,aAAW,EAACT,QAAQ;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzB,CAAC,gBAENhB,OAAA;MAAAY,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACd,EAAA,CAjCID,aAAa;AAAAgB,EAAA,GAAbhB,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}