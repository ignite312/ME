{"ast":null,"code":"var _jsxFileName = \"/Users/emon/Desktop/ME/src/CodeforcesInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst makeRequest = async (url, method) => {\n  try {\n    const response = await fetch(url, {\n      method\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error making request:', error);\n    throw error;\n  }\n};\nconst YourComponent = () => {\n  _s();\n  const [flagText, setFlagText] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await makeRequest('https://ductf.com/api/votes', 'GET');\n        if (response.ok) {\n          setFlagText(response.flag);\n        } else {\n          console.error('Failed to get flag text');\n        }\n      } catch (error) {\n        console.error('Error fetching flag text:', error);\n      }\n    };\n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your React App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), flagText !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Flag Text: \", flagText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading flag text...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(YourComponent, \"jAzFp/ii+2ytE1lZ8ThumeKcJjE=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","makeRequest","url","method","response","fetch","data","json","error","console","YourComponent","_s","flagText","setFlagText","fetchData","ok","flag","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emon/Desktop/ME/src/CodeforcesInfo.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nconst makeRequest = async (url, method) => {\n  try {\n    const response = await fetch(url, { method });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error making request:', error);\n    throw error;\n  }\n};\nconst YourComponent = () => {\n  const [flagText, setFlagText] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await makeRequest('https://ductf.com/api/votes', 'GET');\n        if (response.ok) {\n          setFlagText(response.flag);\n        } else {\n          console.error('Failed to get flag text');\n        }\n      } catch (error) {\n        console.error('Error fetching flag text:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts\n\n  return (\n    <div>\n      <h1>Your React App</h1>\n      {flagText !== null ? (\n        <div>\n          <p>Flag Text: {flagText}</p>\n          {/* Render other components based on flagText if needed */}\n        </div>\n      ) : (\n        <p>Loading flag text...</p>\n      )}\n    </div>\n  );\n};\n\nexport default YourComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,KAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAAEC;IAAO,CAAC,CAAC;IAC7C,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AACD,MAAME,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMV,QAAQ,GAAG,MAAMH,WAAW,CAAC,6BAA6B,EAAE,KAAK,CAAC;QACxE,IAAIG,QAAQ,CAACW,EAAE,EAAE;UACfF,WAAW,CAACT,QAAQ,CAACY,IAAI,CAAC;QAC5B,CAAC,MAAM;UACLP,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDM,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEd,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBT,QAAQ,KAAK,IAAI,gBAChBZ,OAAA;MAAAiB,QAAA,eACEjB,OAAA;QAAAiB,QAAA,GAAG,aAAW,EAACL,QAAQ;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzB,CAAC,gBAENrB,OAAA;MAAAiB,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACV,EAAA,CAjCID,aAAa;AAAAY,EAAA,GAAbZ,aAAa;AAmCnB,eAAeA,aAAa;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}