{"ast":null,"code":"var _jsxFileName = \"/Users/emon/Desktop/ME/src/GitHubInfo.js\",\n  _s = $RefreshSig$();\n// GitHubInfo.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GitHubInfo = () => {\n  _s();\n  const [githubData, setGithubData] = useState(null);\n  useEffect(() => {\n    // Fetch GitHub data and update the state\n    // Replace the following with actual data fetching logic\n\n    const fetchData = async () => {\n      // Example URL\n      const apiUrl = 'https://api.github.com/users/ignite312';\n      try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        setGithubData(data);\n      } catch (error) {\n        console.error('Error fetching GitHub data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"GitHub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Handle : ignite312\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), githubData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Contribution Count: \", githubData.contributions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Repositories: \", githubData.public_repos]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Followers: \", githubData.followers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(GitHubInfo, \"ovlTOzbDmbe5qGrhiFxn9Yf+Z4A=\");\n_c = GitHubInfo;\nexport default GitHubInfo;\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import './Styles.css';\n\n// const GitHubInfo = () => {\n//   const [githubData, setGithubData] = useState(null);\n\n//   const fetchGitHubData = async () => {\n//     const apiUrl = 'https://api.github.com/graphql';\n//     const token = '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'; // Replace with your GitHub Personal Access Token\n\n//     const query = `\n//       query {\n//         viewer {\n//           contributionsCollection {\n//             contributionCalendar {\n//               totalContributions\n//             }\n//           }\n//           login\n//           repositoriesContributedTo {\n//             totalCount\n//           }\n//           repositories(first: 100, isFork: false, privacy: PUBLIC) {\n//             totalCount\n//           }\n//           followers {\n//             totalCount\n//           }\n//         }\n//       }\n//     `;\n\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ query }),\n//       });\n\n//       const data = await response.json();\n\n//       if (data.errors) {\n//         throw new Error(`GitHub API request failed: ${data.errors[0].message}`);\n//       }\n\n//       setGithubData(data.data.viewer);\n//     } catch (error) {\n//       console.error('Error fetching GitHub data:', error);\n//     }\n//   };\n\n//   const fetchPublicRepos = async () => {\n//     const apiUrl = 'https://api.github.com/users/ignite312';\n//     try {\n//       const response = await fetch(apiUrl);\n//       const data = await response.json();\n//       setGithubData((prevData) => ({\n//         ...prevData,\n//         repositories: { totalCount: data.public_repos },\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching public repositories count:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchGitHubData();\n//     fetchPublicRepos();\n//   }, []);\n\n//   return (\n//     <div className=\"card\">\n//       <h3>GitHub</h3>\n//       {githubData && githubData.contributionsCollection && githubData.contributionsCollection.contributionCalendar && (\n//         <div className=\"card-content\">\n//           <h2>Handle: {githubData.login}</h2>\n//           <p>Contribution Count: {githubData.contributionsCollection.contributionCalendar.totalContributions}</p>\n//           {githubData.repositories && githubData.repositories.totalCount && (\n//             <p>Public Repositories: {githubData.repositories.totalCount}</p>\n//           )}\n//           <p>Repositories Contributed To: {githubData.repositoriesContributedTo.totalCount}</p>\n//           <p>Followers: {githubData.followers.totalCount}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GitHubInfo;\nvar _c;\n$RefreshReg$(_c, \"GitHubInfo\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GitHubInfo","_s","githubData","setGithubData","fetchData","apiUrl","response","fetch","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","contributions","public_repos","followers","_c","$RefreshReg$"],"sources":["/Users/emon/Desktop/ME/src/GitHubInfo.js"],"sourcesContent":["// GitHubInfo.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Styles.css';\n\n\nconst GitHubInfo = () => {\n  const [githubData, setGithubData] = useState(null);\n\n  useEffect(() => {\n    // Fetch GitHub data and update the state\n    // Replace the following with actual data fetching logic\n\n    const fetchData = async () => {\n      // Example URL\n      const apiUrl = 'https://api.github.com/users/ignite312';\n\n      try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        setGithubData(data);\n      } catch (error) {\n        console.error('Error fetching GitHub data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <h3>GitHub</h3>\n      <h2>Handle : ignite312</h2>\n      {githubData && (\n        <div className=\"card-content\">\n          <p>Contribution Count: {githubData.contributions}</p>\n          <p>Repositories: {githubData.public_repos}</p>\n          <p>Followers: {githubData.followers}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GitHubInfo;\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// GitHubInfo.js\n\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import './Styles.css';\n\n// const GitHubInfo = () => {\n//   const [githubData, setGithubData] = useState(null);\n\n//   const fetchGitHubData = async () => {\n//     const apiUrl = 'https://api.github.com/graphql';\n//     const token = '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'; // Replace with your GitHub Personal Access Token\n\n//     const query = `\n//       query {\n//         viewer {\n//           contributionsCollection {\n//             contributionCalendar {\n//               totalContributions\n//             }\n//           }\n//           login\n//           repositoriesContributedTo {\n//             totalCount\n//           }\n//           repositories(first: 100, isFork: false, privacy: PUBLIC) {\n//             totalCount\n//           }\n//           followers {\n//             totalCount\n//           }\n//         }\n//       }\n//     `;\n\n//     try {\n//       const response = await fetch(apiUrl, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify({ query }),\n//       });\n\n//       const data = await response.json();\n\n//       if (data.errors) {\n//         throw new Error(`GitHub API request failed: ${data.errors[0].message}`);\n//       }\n\n//       setGithubData(data.data.viewer);\n//     } catch (error) {\n//       console.error('Error fetching GitHub data:', error);\n//     }\n//   };\n\n//   const fetchPublicRepos = async () => {\n//     const apiUrl = 'https://api.github.com/users/ignite312';\n//     try {\n//       const response = await fetch(apiUrl);\n//       const data = await response.json();\n//       setGithubData((prevData) => ({\n//         ...prevData,\n//         repositories: { totalCount: data.public_repos },\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching public repositories count:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchGitHubData();\n//     fetchPublicRepos();\n//   }, []);\n\n//   return (\n//     <div className=\"card\">\n//       <h3>GitHub</h3>\n//       {githubData && githubData.contributionsCollection && githubData.contributionsCollection.contributionCalendar && (\n//         <div className=\"card-content\">\n//           <h2>Handle: {githubData.login}</h2>\n//           <p>Contribution Count: {githubData.contributionsCollection.contributionCalendar.totalContributions}</p>\n//           {githubData.repositories && githubData.repositories.totalCount && (\n//             <p>Public Repositories: {githubData.repositories.totalCount}</p>\n//           )}\n//           <p>Repositories Contributed To: {githubData.repositoriesContributedTo.totalCount}</p>\n//           <p>Followers: {githubData.followers.totalCount}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GitHubInfo;\n\n\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd;IACA;;IAEA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B;MACA,MAAMC,MAAM,GAAG,wCAAwC;MAEvD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;QACpC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCN,aAAa,CAACK,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBd,OAAA;MAAAc,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACflB,OAAA;MAAAc,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bf,UAAU,iBACTH,OAAA;MAAKa,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3Bd,OAAA;QAAAc,QAAA,GAAG,sBAAoB,EAACX,UAAU,CAACgB,aAAa;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrDlB,OAAA;QAAAc,QAAA,GAAG,gBAAc,EAACX,UAAU,CAACiB,YAAY;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9ClB,OAAA;QAAAc,QAAA,GAAG,aAAW,EAACX,UAAU,CAACkB,SAAS;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChB,EAAA,CApCID,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAsChB,eAAeA,UAAU;AACzB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}