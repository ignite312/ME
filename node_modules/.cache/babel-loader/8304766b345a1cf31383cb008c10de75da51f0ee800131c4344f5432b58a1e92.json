{"ast":null,"code":"import React,{useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const YourComponent=()=>{const[apiData,setApiData]=useState(null);useEffect(()=>{const fetchData=async()=>{try{const response=await fetch('https://vote2.ductf.com/api/votes',{method:'GET',headers:{'Content-Type':'application/json'// Include additional headers if needed\n}// credentials: 'include', // Uncomment if you need to include credentials (e.g., cookies) in the request\n});if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const data=await response.json();setApiData(data);}catch(error){console.error('Error making API request:',error);}};fetchData();},[]);// The empty dependency array ensures that this effect runs once when the component mounts\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Your React App\"}),apiData!==null?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\"API Data: \",JSON.stringify(apiData)]})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading API data...\"})]});};export default YourComponent;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","YourComponent","apiData","setApiData","fetchData","response","fetch","method","headers","ok","Error","concat","status","data","json","error","console","children","JSON","stringify"],"sources":["/Users/emon/Desktop/ME/src/CodeforcesInfo.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst YourComponent = () => {\n  const [apiData, setApiData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://vote2.ductf.com/api/votes', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            // Include additional headers if needed\n          },\n          // credentials: 'include', // Uncomment if you need to include credentials (e.g., cookies) in the request\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        setApiData(data);\n      } catch (error) {\n        console.error('Error making API request:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts\n\n  return (\n    <div>\n      <h1>Your React App</h1>\n      {apiData !== null ? (\n        <div>\n          {/* Render components based on the API data */}\n          <p>API Data: {JSON.stringify(apiData)}</p>\n        </div>\n      ) : (\n        <p>Loading API data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default YourComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,mCAAmC,CAAE,CAChEC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAChB;AACF,CACA;AACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAC,MAAA,CAAwBN,QAAQ,CAACO,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCX,UAAU,CAACU,IAAI,CAAC,CAClB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CAEDX,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBACEJ,KAAA,QAAAiB,QAAA,eACEnB,IAAA,OAAAmB,QAAA,CAAI,gBAAc,CAAI,CAAC,CACtBf,OAAO,GAAK,IAAI,cACfJ,IAAA,QAAAmB,QAAA,cAEEjB,KAAA,MAAAiB,QAAA,EAAG,YAAU,CAACC,IAAI,CAACC,SAAS,CAACjB,OAAO,CAAC,EAAI,CAAC,CACvC,CAAC,cAENJ,IAAA,MAAAmB,QAAA,CAAG,qBAAmB,CAAG,CAC1B,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}