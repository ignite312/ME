{"ast":null,"code":"/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Styles.css';\nimport githubLogo from './github.png'; // Replace with the actual file path of your Codeforces logo\n\nconst GitHubInfo = () => {\n  const [githubData, setGithubData] = useState(null);\n\n  const fetchGitHubData = async () => {\n    const userApiUrl = 'https://api.github.com/users/ignite312';\n    const graphqlApiUrl = 'https://api.github.com/graphql';\n    const token = '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';\n\n    try {\n      const userResponse = await fetch(userApiUrl);\n      const userData = await userResponse.json();\n\n      if (!userResponse.ok) {\n        throw new Error(`GitHub API request failed: ${userData.message}`);\n      }\n\n      const query = `\n        query {\n          viewer {\n            contributionsCollection {\n              contributionCalendar {\n                totalContributions\n              }\n            }\n            login\n            repositoriesContributedTo {\n              totalCount\n            }\n            followers {\n              totalCount\n            }\n            following {\n              totalCount\n            }\n          }\n        }\n      `;\n\n      const response = await fetch(graphqlApiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ query }),\n      });\n\n      const data = await response.json();\n\n      if (data.errors) {\n        throw new Error(`GitHub GraphQL API request failed: ${data.errors[0].message}`);\n      }\n\n      setGithubData({\n        login: userData.login,\n        public_repos: userData.public_repos,\n        followers: userData.followers,\n        following: userData.following,\n        contributions: data.data.viewer.contributionsCollection.contributionCalendar.totalContributions,\n        repositoriesContributedTo: data.data.viewer.repositoriesContributedTo.totalCount,\n      });\n    } catch (error) {\n      console.error('Error fetching GitHub data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGitHubData();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <h3>GitHub</h3>\n      <img src={githubLogo} alt=\"Codeforces Logo\" className=\"logo\" />\n      {githubData && (\n        <div className=\"card-content\">\n          <h2>Handle: {githubData.login}</h2>\n          <div style={{ color: 'green' }}>\n              <span style={{ color: 'black' }}>Contribution Count: </span>\n              <strong>{'+'+ githubData.contributions}</strong>\n            </div>\n          <p>Public Repositories: {githubData.public_repos}</p>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <p>Followers: {githubData.followers}</p>\n            <p>Following: {githubData.following}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GitHubInfo;\n*/import React,{useState,useEffect}from'react';import'./App.css';import'./Styles.css';import githubLogo from'./github.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const GitHubInfo=()=>{const[githubData,setGithubData]=useState(null);const fetchGitHubData=async()=>{const userApiUrl='https://api.github.com/users/ignite312';try{const userResponse=await fetch(userApiUrl);if(!userResponse.ok){throw new Error(\"GitHub API request failed: \".concat(userResponse.statusText));}const userData=await userResponse.json();setGithubData({login:userData.login,public_repos:userData.public_repos,followers:userData.followers,following:userData.following});}catch(error){console.error('Error fetching GitHub data:',error);}};useEffect(()=>{fetchGitHubData();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"GitHub\"}),/*#__PURE__*/_jsx(\"img\",{src:githubLogo,alt:\"GitHub Logo\",className:\"logo\"}),githubData&&/*#__PURE__*/_jsxs(\"div\",{className:\"card-content\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Handle: \",githubData.login]}),/*#__PURE__*/_jsxs(\"div\",{style:{color:'green'},children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'black'},children:\"Contribution Count: \"}),/*#__PURE__*/_jsx(\"strong\",{children:'++'})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Public Repositories: \",githubData.public_repos]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'10px'},children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Followers: \",githubData.followers]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Following: \",githubData.following]})]})]})]});};export default GitHubInfo;","map":{"version":3,"names":["React","useState","useEffect","githubLogo","jsx","_jsx","jsxs","_jsxs","GitHubInfo","githubData","setGithubData","fetchGitHubData","userApiUrl","userResponse","fetch","ok","Error","concat","statusText","userData","json","login","public_repos","followers","following","error","console","className","children","src","alt","style","color","display","gap"],"sources":["/Users/emon/Desktop/ME/src/GitHubInfo.js"],"sourcesContent":["/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Styles.css';\nimport githubLogo from './github.png'; // Replace with the actual file path of your Codeforces logo\n\nconst GitHubInfo = () => {\n  const [githubData, setGithubData] = useState(null);\n\n  const fetchGitHubData = async () => {\n    const userApiUrl = 'https://api.github.com/users/ignite312';\n    const graphqlApiUrl = 'https://api.github.com/graphql';\n    const token = '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';\n\n    try {\n      const userResponse = await fetch(userApiUrl);\n      const userData = await userResponse.json();\n\n      if (!userResponse.ok) {\n        throw new Error(`GitHub API request failed: ${userData.message}`);\n      }\n\n      const query = `\n        query {\n          viewer {\n            contributionsCollection {\n              contributionCalendar {\n                totalContributions\n              }\n            }\n            login\n            repositoriesContributedTo {\n              totalCount\n            }\n            followers {\n              totalCount\n            }\n            following {\n              totalCount\n            }\n          }\n        }\n      `;\n\n      const response = await fetch(graphqlApiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ query }),\n      });\n\n      const data = await response.json();\n\n      if (data.errors) {\n        throw new Error(`GitHub GraphQL API request failed: ${data.errors[0].message}`);\n      }\n\n      setGithubData({\n        login: userData.login,\n        public_repos: userData.public_repos,\n        followers: userData.followers,\n        following: userData.following,\n        contributions: data.data.viewer.contributionsCollection.contributionCalendar.totalContributions,\n        repositoriesContributedTo: data.data.viewer.repositoriesContributedTo.totalCount,\n      });\n    } catch (error) {\n      console.error('Error fetching GitHub data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGitHubData();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <h3>GitHub</h3>\n      <img src={githubLogo} alt=\"Codeforces Logo\" className=\"logo\" />\n      {githubData && (\n        <div className=\"card-content\">\n          <h2>Handle: {githubData.login}</h2>\n          <div style={{ color: 'green' }}>\n              <span style={{ color: 'black' }}>Contribution Count: </span>\n              <strong>{'+'+ githubData.contributions}</strong>\n            </div>\n          <p>Public Repositories: {githubData.public_repos}</p>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <p>Followers: {githubData.followers}</p>\n            <p>Following: {githubData.following}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GitHubInfo;\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './Styles.css';\nimport githubLogo from './github.png';\n\nconst GitHubInfo = () => {\n  const [githubData, setGithubData] = useState(null);\n\n  const fetchGitHubData = async () => {\n    const userApiUrl = 'https://api.github.com/users/ignite312';\n\n    try {\n      const userResponse = await fetch(userApiUrl);\n\n      if (!userResponse.ok) {\n        throw new Error(`GitHub API request failed: ${userResponse.statusText}`);\n      }\n\n      const userData = await userResponse.json();\n\n      setGithubData({\n        login: userData.login,\n        public_repos: userData.public_repos,\n        followers: userData.followers,\n        following: userData.following,\n      });\n    } catch (error) {\n      console.error('Error fetching GitHub data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGitHubData();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <h3>GitHub</h3>\n      <img src={githubLogo} alt=\"GitHub Logo\" className=\"logo\" />\n      {githubData && (\n        <div className=\"card-content\">\n          <h2>Handle: {githubData.login}</h2>\n          <div style={{ color: 'green' }}>\n            <span style={{ color: 'black' }}>Contribution Count: </span>\n            <strong>{'++'}</strong>\n            {/* <strong>{'+' + githubData.contributions}</strong> */}\n          </div>\n          <p>Public Repositories: {githubData.public_repos}</p>\n          <div style={{ display: 'flex', gap: '10px' }}>\n            <p>Followers: {githubData.followers}</p>\n            <p>Following: {githubData.following}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GitHubInfo;\n"],"mappingslD,MAAO,WAAW,CAClB,MAAO,cAAc,CACrB,MAAO,CAAAC,UAAU,KAAM,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEtC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAElD,KAAM,CAAAU,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,KAAM,CAAAC,UAAU,CAAG,wCAAwC,CAE3D,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAC,KAAK,CAACF,UAAU,CAAC,CAE5C,GAAI,CAACC,YAAY,CAACE,EAAE,CAAE,CACpB,KAAM,IAAI,CAAAC,KAAK,+BAAAC,MAAA,CAA+BJ,YAAY,CAACK,UAAU,CAAE,CAAC,CAC1E,CAEA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,YAAY,CAACO,IAAI,CAAC,CAAC,CAE1CV,aAAa,CAAC,CACZW,KAAK,CAAEF,QAAQ,CAACE,KAAK,CACrBC,YAAY,CAAEH,QAAQ,CAACG,YAAY,CACnCC,SAAS,CAAEJ,QAAQ,CAACI,SAAS,CAC7BC,SAAS,CAAEL,QAAQ,CAACK,SACtB,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAAC,CAEDvB,SAAS,CAAC,IAAM,CACdS,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEJ,KAAA,QAAKoB,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBvB,IAAA,OAAAuB,QAAA,CAAI,QAAM,CAAI,CAAC,cACfvB,IAAA,QAAKwB,GAAG,CAAE1B,UAAW,CAAC2B,GAAG,CAAC,aAAa,CAACH,SAAS,CAAC,MAAM,CAAE,CAAC,CAC1DlB,UAAU,eACTF,KAAA,QAAKoB,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BrB,KAAA,OAAAqB,QAAA,EAAI,UAAQ,CAACnB,UAAU,CAACY,KAAK,EAAK,CAAC,cACnCd,KAAA,QAAKwB,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAQ,CAAE,CAAAJ,QAAA,eAC7BvB,IAAA,SAAM0B,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAQ,CAAE,CAAAJ,QAAA,CAAC,sBAAoB,CAAM,CAAC,cAC5DvB,IAAA,WAAAuB,QAAA,CAAS,IAAI,CAAS,CAAC,EAEpB,CAAC,cACNrB,KAAA,MAAAqB,QAAA,EAAG,uBAAqB,CAACnB,UAAU,CAACa,YAAY,EAAI,CAAC,cACrDf,KAAA,QAAKwB,KAAK,CAAE,CAAEE,OAAO,CAAE,MAAM,CAAEC,GAAG,CAAE,MAAO,CAAE,CAAAN,QAAA,eAC3CrB,KAAA,MAAAqB,QAAA,EAAG,aAAW,CAACnB,UAAU,CAACc,SAAS,EAAI,CAAC,cACxChB,KAAA,MAAAqB,QAAA,EAAG,aAAW,CAACnB,UAAU,CAACe,SAAS,EAAI,CAAC,EACrC,CAAC,EACH,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}